buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "io.freefair.gradle:lombok-plugin:4.1.6"
        classpath "com.palantir.gradle.gitversion:gradle-git-version:0.12.2"
    }
}

plugins {
    id 'info.solidsoft.pitest' version '1.5.1'
}

apply plugin: 'java'
apply plugin: 'application'
//See https://www.baeldung.com/lombok-ide for how to configure intellij to work with lombok
apply plugin: 'io.freefair.lombok'
apply plugin: 'jacoco'
apply plugin: 'distribution'
apply plugin: 'com.palantir.git-version'

mainClassName = 'net.trilogy.arch.Application'
sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11
version = '0.1.4'

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    //Google
    implementation 'com.google.apis:google-api-services-docs:v1-rev46-1.25.0'
    implementation 'com.google.api-client:google-api-client:1.30.5'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.30.1'

    //Guava
    implementation 'com.google.guava:guava:28.2-jre'

    //Structurizr
    implementation 'com.structurizr:structurizr-client:1.3.3'
    implementation 'com.google.code.gson:gson:2.8.6'

    // https://mvnrepository.com/artifact/org.eclipse.jgit/org.eclipse.jgit
    implementation group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '5.7.0.202003110725-r'

    implementation group: 'guru.nidi', name: 'graphviz-java-all-j2v8', version: '0.16.2'

    //Command line arguments
    implementation 'info.picocli:picocli:4.2.0'
    annotationProcessor 'info.picocli:picocli-codegen:4.2.0'

    //vavr
    implementation 'io.vavr:vavr:0.10.2'

    //yaml
    implementation 'com.networknt:json-schema-validator:1.0.30'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.10.2'
    implementation 'com.fasterxml.jackson.module:jackson-module-jsonSchema:2.10.2'

    //json
    implementation 'org.json:json:20180130'

    //logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.13.3'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.3'

    //Testing
    //Makesure hamcrest is above junit see - https://stackoverflow.com/questions/7869711/getting-nosuchmethoderror-org-hamcrest-matcher-describemismatch-when-running
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'junit:junit:4.13'
    testImplementation group: 'commons-io', name: 'commons-io', version: '2.6'
    testImplementation "org.mockito:mockito-core:2.+"
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = [
                    'net.trilogy.arch.Application',
            ]
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
        csv.enabled false
    }
}

check.dependsOn jacocoTestCoverageVerification

plugins.withType(DistributionPlugin) {
    distTar {
        compression = Compression.GZIP
        extension = 'tar.gz'
    }
}

pitest {
    targetClasses = ['net.trilogy.*']
    threads = 4
    outputFormats = ['XML', 'HTML']
    timestampedReports = true
}

def generatedResources = "$buildDir/generated-resources/main"
sourceSets {
    main {
        //register an output folder on the main SourceSet:
        output.dir(generatedResources, builtBy: 'generateVersionTxt')
        //it is now a part of the 'main' classpath and will be a part of the jar
    }
}

//a task that generates the resources:
task generateVersionTxt {
    description 'Creates a version.txt file with build info that is added to the root of the jar'
    doLast {
        new File(generatedResources).mkdirs()
        def generated = new File(generatedResources, "version.txt")

        def details = versionDetails()
        generated.text = """
          Version: $rootProject.version, build $details.gitHash 
          """
    }
}

project.test {
    def outputCache = new LinkedList<String>()

    beforeTest { TestDescriptor td -> outputCache.clear() }

    onOutput { 
        TestDescriptor td, TestOutputEvent toe ->   
            outputCache.add(toe.getMessage())
            while (outputCache.size() > 1000) outputCache.remove()
    }

    testLogging {
        events "FAILED", "SKIPPED"
        exceptionFormat "FULL"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }

    afterTest { 
        TestDescriptor td, TestResult tr ->
            if (tr.resultType == TestResult.ResultType.FAILURE) {
                println()
                println(" Output of ${td.className}.${td.name}:")
                outputCache.each { print(" > $it") }
            }
    }
}


jar {
    manifest {
        attributes 'Main-Class': 'net.trilogy.arch.Application'
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF"
        exclude "META-INF/*.DSA"
        exclude "META-INF/*.RSA"
    }
}
